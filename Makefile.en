# Temporary Mailbox System Makefile (Windows Version)
# Simplified version, compatible with Windows environment

# Variable definitions
APP_NAME := temp-mailbox-service
BACKEND_DIR := backend
BIN_DIR := $(BACKEND_DIR)/bin

.PHONY: help
help: ## Show help information
	@echo "Temporary Mailbox System - Available Commands:"
	@echo ""
	@echo "Development Commands:"
	@echo "  setup          Initialize development environment"
	@echo "  dev            Start development server (hot reload)"
	@echo "  run            Run server directly"
	@echo "  worker         Run background task service"
	@echo ""
	@echo "Build Commands:"
	@echo "  build          Build all binaries"
	@echo "  build-server   Build server binary"
	@echo "  build-worker   Build worker binary"
	@echo ""
	@echo "Test Commands:"
	@echo "  test           Run all tests"
	@echo "  test-coverage  Run tests and generate coverage report"
	@echo ""
	@echo "Database Commands:"
	@echo "  db-migrate     Execute database migration"
	@echo "  db-seed        Seed test data"
	@echo "  db-reset       Reset database"
	@echo ""
	@echo "Code Quality:"
	@echo "  fmt            Format code"
	@echo "  vet            Run static analysis"
	@echo "  tidy           Tidy dependencies"
	@echo ""
	@echo "Docker Commands:"
	@echo "  docker-up      Start Docker development environment"
	@echo "  docker-down    Stop Docker development environment"
	@echo ""
	@echo "Tool Commands:"
	@echo "  gen-env        Generate environment config files"
	@echo "  clean          Clean build files"
	@echo "  install-tools  Install development tools"

##@ Development Commands

.PHONY: setup
setup: ## Initialize development environment
	@echo "🔧 Initializing development environment..."
	@cd $(BACKEND_DIR) && go mod download
	@cd $(BACKEND_DIR) && go mod tidy
	@echo "✅ Development environment initialized"

.PHONY: dev
dev: ## Start development server (hot reload)
	@echo "🚀 Starting development server..."
	@cd $(BACKEND_DIR) && air

.PHONY: run
run: ## Run server directly
	@echo "🚀 Starting server..."
	@cd $(BACKEND_DIR) && go run cmd/server/main.go

.PHONY: worker
worker: ## Run background task service
	@echo "⚙️ Starting background task service..."
	@cd $(BACKEND_DIR) && go run cmd/worker/main.go

##@ Build Commands

.PHONY: build
build: build-server build-worker ## Build all binaries

.PHONY: build-server
build-server: ## Build server binary
	@echo "🔨 Building server..."
	@if not exist "$(BIN_DIR)" mkdir "$(BIN_DIR)"
	@cd $(BACKEND_DIR) && go build -o bin/server.exe cmd/server/main.go
	@echo "✅ Server build completed: $(BIN_DIR)/server.exe"

.PHONY: build-worker
build-worker: ## Build worker binary
	@echo "🔨 Building worker service..."
	@if not exist "$(BIN_DIR)" mkdir "$(BIN_DIR)"
	@cd $(BACKEND_DIR) && go build -o bin/worker.exe cmd/worker/main.go
	@echo "✅ Worker build completed: $(BIN_DIR)/worker.exe"

##@ Test Commands

.PHONY: test
test: ## Run all tests
	@echo "🧪 Running tests..."
	@cd $(BACKEND_DIR) && go test ./... -v

.PHONY: test-coverage
test-coverage: ## Run tests and generate coverage report
	@echo "📊 Generating test coverage report..."
	@cd $(BACKEND_DIR) && go test ./... -coverprofile=coverage.out
	@cd $(BACKEND_DIR) && go tool cover -html=coverage.out -o coverage.html
	@echo "✅ Coverage report generated: $(BACKEND_DIR)/coverage.html"

##@ Database Commands

.PHONY: db-migrate
db-migrate: ## Execute database migration
	@echo "🗄️ Executing database migration..."
	@cd $(BACKEND_DIR) && go run scripts/migrate.go

.PHONY: db-seed
db-seed: ## Seed test data
	@echo "🌱 Seeding test data..."
	@cd $(BACKEND_DIR) && go run scripts/seed.go

.PHONY: db-reset
db-reset: ## Reset database (drop and re-migrate)
	@echo "🔄 Resetting database..."
	@if exist "$(BACKEND_DIR)\dev.db" del "$(BACKEND_DIR)\dev.db"
	@$(MAKE) db-migrate
	@$(MAKE) db-seed

##@ Code Quality

.PHONY: fmt
fmt: ## Format code
	@echo "💅 Formatting code..."
	@cd $(BACKEND_DIR) && go fmt ./...
	@echo "✅ Code formatting completed"

.PHONY: vet
vet: ## Run go vet check
	@echo "🔍 Running static analysis..."
	@cd $(BACKEND_DIR) && go vet ./...

.PHONY: tidy
tidy: ## Tidy dependencies
	@echo "📦 Tidying dependencies..."
	@cd $(BACKEND_DIR) && go mod tidy

##@ Docker Commands

.PHONY: docker-up
docker-up: ## Start Docker development environment
	@echo "🐳 Starting Docker development environment..."
	@docker-compose -f docker-compose.dev.yml up -d

.PHONY: docker-down
docker-down: ## Stop Docker development environment
	@echo "🐳 Stopping Docker development environment..."
	@docker-compose -f docker-compose.dev.yml down

.PHONY: docker-logs
docker-logs: ## View Docker logs
	@docker-compose -f docker-compose.dev.yml logs -f

##@ Tool Commands

.PHONY: install-tools
install-tools: ## Install development tools
	@echo "🔧 Installing development tools..."
	@go install github.com/cosmtrek/air@latest
	@echo "✅ Development tools installed"

.PHONY: gen-env
gen-env: ## Generate environment config files
	@echo "📝 Generating environment config files..."
	@if not exist ".env.dev" ( \
		copy ".env.example" ".env.dev" >nul 2>&1 && \
		echo "✅ Created .env.dev file" \
	) else ( \
		echo "⚠️  .env.dev file already exists" \
	)

.PHONY: clean
clean: ## Clean build files
	@echo "🧹 Cleaning build files..."
	@if exist "$(BIN_DIR)" rmdir /s /q "$(BIN_DIR)" 2>nul
	@if exist "$(BACKEND_DIR)\coverage.out" del "$(BACKEND_DIR)\coverage.out" 2>nul
	@if exist "$(BACKEND_DIR)\coverage.html" del "$(BACKEND_DIR)\coverage.html" 2>nul
	@echo "✅ Cleanup completed"

##@ Quick Command Combinations

.PHONY: quick-start
quick-start: gen-env install-tools setup ## Quick start development environment
	@echo "🎉 Development environment ready!"
	@echo "💡 Tips:"
	@echo "   - Use 'make docker-up' to start database services"
	@echo "   - Use 'make dev' to start hot-reload development server"
	@echo "   - Use 'make run' to run server directly"

.PHONY: quick-test
quick-test: fmt vet test ## Quick test (format + check + test)

# Default target
.DEFAULT_GOAL := help 